{"version":3,"sources":["Card.js","Components/cardlist.js","Components/SearchBox.js","Components/scroll.js","Containers/app.js","reportWebVitals.js","index.js"],"names":["card","name","email","id","className","alt","src","cardlist","robots","map","user","i","Card","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","app","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAgBeA,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAExB,OACI,sBAAKC,UAAW,kDAAhB,UAEE,qBAAKC,IAAK,SAASC,IAAG,+BAA0BH,EAA1B,cACtB,gCACE,mCAAMF,KACN,4BAAIC,WCYDK,EAlBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEf,OACA,8BACGA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OAAQ,cAACC,EAAD,CAECT,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCKPE,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,qBAAKX,UAAY,MAAjB,SACI,uBACAA,UAAY,uCACZY,KAAO,SACPC,YAAa,gBACbC,SAAWH,OCERI,EATA,SAACC,GAEZ,OACI,qBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAQ,mBAAoBC,OAAQ,SAAxE,SACKJ,EAAMK,YCgDJC,G,wDA1CX,aAAc,IAAD,8BACT,gBAcJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAdzC,EAAKC,MAAQ,CACTxB,OAAO,GACPM,YAAY,IAJP,E,gEAQO,IAAD,OACfmB,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACrB,OAAQ6B,S,+BASzC,IAAD,EACoCC,KAAKN,MAA7BxB,EADZ,EACYA,OAAQM,EADpB,EACoBA,YAEVyB,EAAgB/B,EAAOgC,QAAO,SAAAC,GAChC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAAS7B,EAAY4B,kBAEvD,OAAQlC,EAAOoC,OAIT,sBAAKxC,UAAW,KAAhB,UACA,oBAAIA,UAAY,KAAhB,yBACA,cAAC,EAAD,CAAWW,aAAgBuB,KAAKX,iBAChC,cAAC,EAAD,UACA,cAAC,EAAD,CAAUnB,OAAU+B,SAPtB,gD,GA5BIM,cCCHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OAAQ,cAAC,EAAD,IACbC,SAASC,eAAe,SAM5BX,M","file":"static/js/main.2633cd0b.chunk.js","sourcesContent":["import React from 'react';\n\nconst card = ({name, email, id}) => {\n    \n    return (\n        <div className =\" tc bg-light-green dib br3 ma2 grow bw2 shadow5\">\n          \n          <img alt =\"robots\" src={`https://robohash.org/${id}?200*200`} />\n          <div>\n            <h2> {name}</h2>\n            <p>{email}</p>\n           </div>\n        </div>\n    );\n\n}\nexport default card;","import React from 'react';\nimport Card from '../Card';\n\n\nconst cardlist = ({robots})=>{\n  \n    return (\n    <div>\n      {robots.map((user,i) => {\n        return (<Card \n                 key={i} \n                 id={robots[i].id} \n                 name={robots[i].name} \n                 email={robots[i].email}/>)\n                } \n             )\n        } \n   \n   </div>\n    );\n}\n\nexport default cardlist;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n        <div className = 'pa2'>\n            <input \n            className = 'pa3 ba b--deep-blue bg-lightest-blue' \n            type = 'search' \n            placeholder ='search robots'\n            onChange ={searchChange}\n            />\n        </div>\n        \n    )\n}\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\n    return (\n        <div style = {{overflowY: 'scroll', border: '0.5px solid blue', height: '700px'}}>\n            {props.children}\n        </div>\n         );\n    };   \n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../Components/cardlist.js';\nimport SearchBox from '../Components/SearchBox.js';\nimport Scroll from '../Components/scroll.js';\n\nimport './app.css';\n\n//import { render } from '@testing-library/react';\n\n\n\nclass app extends Component {\n    constructor(){\n        super()\n        this.state = {\n            robots:[],\n            searchField:''\n        }\n    } \n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response =>response.json())\n        .then(users => this.setState({robots: users}));\n       \n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value})  \n    }\n\n    render()\n    {\n        const { robots, searchField } = this.state;\n\n        const filteredRobots =robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        })\n          return !robots.length?\n              <h1>Loading...</h1> :\n\n            (\n                <div className ='tc'>\n                <h1 className = 'f1'>RoboFriendz</h1>\n                <SearchBox searchChange = {this.onSearchChange}/>\n                <Scroll>\n                <CardList robots = {filteredRobots}/>\n                </Scroll>\n                \n                </div>\n        \n               );\n   };\n}\nexport default app; \n\n/* STATE is simply an object that describes the app\nand the STATEthat describes our app here is the robot and whatever is entered into the searchbox\nthe STATE is able to change. we are able to change the value of the searchbox and what robot array mean\nin other word 'what gets displayed'. PROPS are simply things that come out of STATE.\nA parent feeds STATE into a child component as soon as a child component recieves a STATE it becomes a property and that property can never change.\nthe parent tells it what the STATE is and the child recieves it as a Prop in this case thr prop is robots*/\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/app.js';\n\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\n\nReactDOM.render( <App/>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(); "],"sourceRoot":""}