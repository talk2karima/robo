{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _classCallCheck from\"/Users/seventy-nine/Desktop/robofriendz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/seventy-nine/Desktop/robofriendz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/seventy-nine/Desktop/robofriendz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/seventy-nine/Desktop/robofriendz/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import CardList from'../Components/cardlist.js';import SearchBox from'../Components/SearchBox.js';import Scroll from'../Components/scroll.js';import'./app.css';//import { render } from '@testing-library/react';\nvar app=/*#__PURE__*/function(_Component){_inherits(app,_Component);var _super=_createSuper(app);function app(){var _this;_classCallCheck(this,app);_this=_super.call(this);_this.onSearchChange=function(event){_this.setState({searchField:event.target.value});};_this.state={robots:[],searchField:''};return _this;}_createClass(app,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;fetch('https://jsonplaceholder.typicode.com/users').then(function(response){return response.json();}).then(function(users){return _this2.setState({robots:users});});}},{key:\"render\",value:function render(){var _this$state=this.state,robots=_this$state.robots,searchField=_this$state.searchField;var filteredRobots=robots.filter(function(robot){return robot.name.toLowerCase().includes(searchField.toLowerCase());});return!robots.length?/*#__PURE__*/_jsx(\"h1\",{children:\"Loading...\"}):/*#__PURE__*/_jsxs(\"div\",{className:\"tc\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"f1\",children:\"RoboFriendz\"}),/*#__PURE__*/_jsx(SearchBox,{searchChange:this.onSearchChange}),/*#__PURE__*/_jsx(Scroll,{children:/*#__PURE__*/_jsx(CardList,{robots:filteredRobots})})]});}}]);return app;}(Component);export default app;/* STATE is simply an object that describes the app\nand the STATEthat describes our app here is the robot and whatever is entered into the searchbox\nthe STATE is able to change. we are able to change the value of the searchbox and what robot array mean\nin other word 'what gets displayed'. PROPS are simply things that come out of STATE.\nA parent feeds STATE into a child component as soon as a child component recieves a STATE it becomes a property and that property can never change.\nthe parent tells it what the STATE is and the child recieves it as a Prop in this case thr prop is robots*/","map":{"version":3,"sources":["/Users/seventy-nine/Desktop/robofriendz/src/Containers/app.js"],"names":["React","Component","CardList","SearchBox","Scroll","app","onSearchChange","event","setState","searchField","target","value","state","robots","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length"],"mappings":"gsBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,QAAP,KAAqB,2BAArB,CACA,MAAOC,CAAAA,SAAP,KAAsB,4BAAtB,CACA,MAAOC,CAAAA,MAAP,KAAmB,yBAAnB,CAEA,MAAO,WAAP,CAEA;GAIMC,CAAAA,G,0FACF,cAAa,qCACT,wBADS,MAebC,cAfa,CAeI,SAACC,KAAD,CAAW,CACxB,MAAKC,QAAL,CAAc,CAACC,WAAW,CAAEF,KAAK,CAACG,MAAN,CAAaC,KAA3B,CAAd,EACH,CAjBY,CAET,MAAKC,KAAL,CAAa,CACTC,MAAM,CAAC,EADE,CAETJ,WAAW,CAAC,EAFH,CAAb,CAFS,aAMZ,C,6EAEkB,iBACfK,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACM,SAAAC,QAAQ,QAAGA,CAAAA,QAAQ,CAACC,IAAT,EAAH,EADd,EAECF,IAFD,CAEM,SAAAG,KAAK,QAAI,CAAA,MAAI,CAACV,QAAL,CAAc,CAACK,MAAM,CAAEK,KAAT,CAAd,CAAJ,EAFX,EAIH,C,uCAOD,iBACoC,KAAKN,KADzC,CACYC,MADZ,aACYA,MADZ,CACoBJ,WADpB,aACoBA,WADpB,CAGI,GAAMU,CAAAA,cAAc,CAAEN,MAAM,CAACO,MAAP,CAAc,SAAAC,KAAK,CAAI,CACzC,MAAOA,CAAAA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCf,WAAW,CAACc,WAAZ,EAAlC,CAAP,CACH,CAFqB,CAAtB,CAGE,MAAO,CAACV,MAAM,CAACY,MAAR,cACH,kCADG,cAID,aAAK,SAAS,CAAE,IAAhB,wBACA,WAAI,SAAS,CAAG,IAAhB,yBADA,cAEA,KAAC,SAAD,EAAW,YAAY,CAAI,KAAKnB,cAAhC,EAFA,cAGA,KAAC,MAAD,wBACA,KAAC,QAAD,EAAU,MAAM,CAAIa,cAApB,EADA,EAHA,GAJN,CAcN,C,iBAzCclB,S,EA2ClB,cAAeI,CAAAA,GAAf,CAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\nimport CardList from '../Components/cardlist.js';\nimport SearchBox from '../Components/SearchBox.js';\nimport Scroll from '../Components/scroll.js';\n\nimport './app.css';\n\n//import { render } from '@testing-library/react';\n\n\n\nclass app extends Component {\n    constructor(){\n        super()\n        this.state = {\n            robots:[],\n            searchField:''\n        }\n    } \n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response =>response.json())\n        .then(users => this.setState({robots: users}));\n       \n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value})  \n    }\n\n    render()\n    {\n        const { robots, searchField } = this.state;\n\n        const filteredRobots =robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n        })\n          return !robots.length?\n              <h1>Loading...</h1> :\n\n            (\n                <div className ='tc'>\n                <h1 className = 'f1'>RoboFriendz</h1>\n                <SearchBox searchChange = {this.onSearchChange}/>\n                <Scroll>\n                <CardList robots = {filteredRobots}/>\n                </Scroll>\n                \n                </div>\n        \n               );\n   };\n}\nexport default app; \n\n/* STATE is simply an object that describes the app\nand the STATEthat describes our app here is the robot and whatever is entered into the searchbox\nthe STATE is able to change. we are able to change the value of the searchbox and what robot array mean\nin other word 'what gets displayed'. PROPS are simply things that come out of STATE.\nA parent feeds STATE into a child component as soon as a child component recieves a STATE it becomes a property and that property can never change.\nthe parent tells it what the STATE is and the child recieves it as a Prop in this case thr prop is robots*/\n"]},"metadata":{},"sourceType":"module"}